{"ast":null,"code":"var _toConsumableArray = require(\"C:/Users/91808/Music/onlineitsoftwaresolutions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"C:/Users/91808/Music/onlineitsoftwaresolutions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/91808/Music/onlineitsoftwaresolutions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"C:/Users/91808/Music/onlineitsoftwaresolutions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:/Users/91808/Music/onlineitsoftwaresolutions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/91808/Music/onlineitsoftwaresolutions/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _ = require('lodash');\n\nvar GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\n\nvar GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\n\nvar _require = require('./utils'),\n    getFieldMask = _require.getFieldMask,\n    columnToLetter = _require.columnToLetter,\n    letterToColumn = _require.letterToColumn;\n\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  var checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n\n\n  _.each(checkForDupes, function (grouped, header) {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n\n    if (grouped.length > 1) {\n      throw new Error(\"Duplicate header detected: \\\"\".concat(header, \"\\\". Please make sure all non-empty headers are unique\"));\n    }\n  });\n}\n\nvar GoogleSpreadsheetWorksheet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function GoogleSpreadsheetWorksheet(parentSpreadsheet, _ref) {\n    var properties = _ref.properties,\n        data = _ref.data;\n\n    _classCallCheck(this, GoogleSpreadsheetWorksheet);\n\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n    // basic properties\n\n    this._rawProperties = properties;\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n\n    this._columnMetadata = [];\n    if (data) this._fillCellData(data);\n    return this;\n  } // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n\n  _createClass(GoogleSpreadsheetWorksheet, [{\n    key: \"_makeSingleUpdateRequest\",\n    value: function () {\n      var _makeSingleUpdateRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestType, requestParams) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._spreadsheet._makeSingleUpdateRequest(requestType, _objectSpread({}, requestParams)));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _makeSingleUpdateRequest(_x, _x2) {\n        return _makeSingleUpdateRequest2.apply(this, arguments);\n      }\n\n      return _makeSingleUpdateRequest;\n    }()\n  }, {\n    key: \"_ensureInfoLoaded\",\n    value: function _ensureInfoLoaded() {\n      if (!this._rawProperties) {\n        throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n      }\n    }\n  }, {\n    key: \"resetLocalCache\",\n    value: function resetLocalCache(dataOnly) {\n      if (!dataOnly) this._rawProperties = null;\n      this.headerValues = null;\n      this._cells = [];\n    }\n  }, {\n    key: \"_fillCellData\",\n    value: function _fillCellData(dataRanges) {\n      var _this = this;\n\n      _.each(dataRanges, function (range) {\n        var startRow = range.startRow || 0;\n        var startColumn = range.startColumn || 0;\n        var numRows = range.rowMetadata.length;\n        var numColumns = range.columnMetadata.length; // update cell data for entire range\n\n        for (var i = 0; i < numRows; i++) {\n          var actualRow = startRow + i;\n\n          for (var j = 0; j < numColumns; j++) {\n            var actualColumn = startColumn + j; // if the row has not been initialized yet, do it\n\n            if (!_this._cells[actualRow]) _this._cells[actualRow] = []; // see if the response includes some info for the cell\n\n            var cellData = _.get(range, \"rowData[\".concat(i, \"].values[\").concat(j, \"]\")); // update the cell object or create it\n\n\n            if (_this._cells[actualRow][actualColumn]) {\n              _this._cells[actualRow][actualColumn]._updateRawData(cellData);\n            } else {\n              _this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(_this, actualRow, actualColumn, cellData);\n            }\n          }\n        } // update row metadata\n\n\n        for (var _i = 0; _i < range.rowMetadata.length; _i++) {\n          _this._rowMetadata[startRow + _i] = range.rowMetadata[_i];\n        } // update column metadata\n\n\n        for (var _i2 = 0; _i2 < range.columnMetadata.length; _i2++) {\n          _this._columnMetadata[startColumn + _i2] = range.columnMetadata[_i2];\n        }\n      });\n    } // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"_getProp\",\n    value: function _getProp(param) {\n      this._ensureInfoLoaded();\n\n      return this._rawProperties[param];\n    }\n  }, {\n    key: \"_setProp\",\n    value: function _setProp(param, newVal) {\n      // eslint-disable-line no-unused-vars\n      throw new Error('Do not update directly - use `updateProperties()`');\n    }\n  }, {\n    key: \"sheetId\",\n    get: function get() {\n      return this._getProp('sheetId');\n    },\n    set: function set(newVal) {\n      return this._setProp('sheetId', newVal);\n    }\n  }, {\n    key: \"title\",\n    get: function get() {\n      return this._getProp('title');\n    },\n    set: function set(newVal) {\n      return this._setProp('title', newVal);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this._getProp('index');\n    },\n    set: function set(newVal) {\n      return this._setProp('index', newVal);\n    }\n  }, {\n    key: \"sheetType\",\n    get: function get() {\n      return this._getProp('sheetType');\n    },\n    set: function set(newVal) {\n      return this._setProp('sheetType', newVal);\n    }\n  }, {\n    key: \"gridProperties\",\n    get: function get() {\n      return this._getProp('gridProperties');\n    },\n    set: function set(newVal) {\n      return this._setProp('gridProperties', newVal);\n    }\n  }, {\n    key: \"hidden\",\n    get: function get() {\n      return this._getProp('hidden');\n    },\n    set: function set(newVal) {\n      return this._setProp('hidden', newVal);\n    }\n  }, {\n    key: \"tabColor\",\n    get: function get() {\n      return this._getProp('tabColor');\n    },\n    set: function set(newVal) {\n      return this._setProp('tabColor', newVal);\n    }\n  }, {\n    key: \"rightToLeft\",\n    get: function get() {\n      return this._getProp('rightToLeft');\n    },\n    set: function set(newVal) {\n      return this._setProp('rightToLeft', newVal);\n    }\n  }, {\n    key: \"rowCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this.gridProperties.rowCount;\n    },\n    set: function set(newVal) {\n      throw new Error('Do not update directly. Use resize()');\n    }\n  }, {\n    key: \"columnCount\",\n    get: function get() {\n      this._ensureInfoLoaded();\n\n      return this.gridProperties.columnCount;\n    },\n    set: function set(newVal) {\n      throw new Error('Do not update directly. Use resize()');\n    }\n  }, {\n    key: \"colCount\",\n    get: function get() {\n      throw new Error('`colCount` is deprecated - please use `columnCount` instead.');\n    }\n  }, {\n    key: \"a1SheetName\",\n    get: function get() {\n      return \"'\".concat(this.title.replace(/'/g, \"''\"), \"'\");\n    }\n  }, {\n    key: \"encodedA1SheetName\",\n    get: function get() {\n      return encodeURIComponent(this.a1SheetName);\n    }\n  }, {\n    key: \"lastColumnLetter\",\n    get: function get() {\n      return columnToLetter(this.columnCount);\n    } // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"cellStats\",\n    get: function get() {\n      var allCells = _.flatten(this._cells);\n\n      allCells = _.compact(allCells);\n      return {\n        nonEmpty: _.filter(allCells, function (c) {\n          return c.value;\n        }).length,\n        loaded: allCells.length,\n        total: this.rowCount * this.columnCount\n      };\n    }\n  }, {\n    key: \"getCellByA1\",\n    value: function getCellByA1(a1Address) {\n      var split = a1Address.match(/([A-Z]+)([0-9]+)/);\n      var columnIndex = letterToColumn(split[1]);\n      var rowIndex = parseInt(split[2]);\n      return this.getCell(rowIndex - 1, columnIndex - 1);\n    }\n  }, {\n    key: \"getCell\",\n    value: function getCell(rowIndex, columnIndex) {\n      if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n\n      if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n        throw new Error(\"Out of bounds, sheet is \".concat(this.rowCount, \" by \").concat(this.columnCount));\n      }\n\n      if (!_.get(this._cells, \"[\".concat(rowIndex, \"][\").concat(columnIndex, \"]\"))) {\n        throw new Error('This cell has not been loaded yet');\n      }\n\n      return this._cells[rowIndex][columnIndex];\n    }\n  }, {\n    key: \"loadCells\",\n    value: function () {\n      var _loadCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(sheetFilters) {\n        var _this2 = this;\n\n        var filtersArray;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (sheetFilters) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this._spreadsheet.loadCells(this.a1SheetName));\n\n              case 2:\n                filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n                filtersArray = _.map(filtersArray, function (filter) {\n                  // add sheet name to A1 ranges\n                  if (_.isString(filter)) {\n                    if (filter.startsWith(_this2.a1SheetName)) return filter;\n                    return \"\".concat(_this2.a1SheetName, \"!\").concat(filter);\n                  }\n\n                  if (_.isObject(filter)) {\n                    // TODO: detect and support DeveloperMetadata filters\n                    if (!filter.sheetId) {\n                      return _objectSpread({\n                        sheetId: _this2.sheetId\n                      }, filter);\n                    }\n\n                    if (filter.sheetId !== _this2.sheetId) {\n                      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n                    } else {\n                      return filter;\n                    }\n                  } else {\n                    throw new Error('Each filter must be a A1 range string or gridrange object');\n                  }\n                });\n                return _context2.abrupt(\"return\", this._spreadsheet.loadCells(filtersArray));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadCells(_x3) {\n        return _loadCells.apply(this, arguments);\n      }\n\n      return loadCells;\n    }()\n  }, {\n    key: \"saveUpdatedCells\",\n    value: function () {\n      var _saveUpdatedCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var cellsToSave;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                cellsToSave = _.filter(_.flatten(this._cells), {\n                  _isDirty: true\n                });\n\n                if (!cellsToSave.length) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this.saveCells(cellsToSave);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function saveUpdatedCells() {\n        return _saveUpdatedCells.apply(this, arguments);\n      }\n\n      return saveUpdatedCells;\n    }()\n  }, {\n    key: \"saveCells\",\n    value: function () {\n      var _saveCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(cellsToUpdate) {\n        var _this3 = this;\n\n        var requests, responseRanges;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // we send an individual \"updateCells\" request for each cell\n                // because the fields that are udpated for each group are the same\n                // and we dont want to accidentally overwrite something\n                requests = _.map(cellsToUpdate, function (cell) {\n                  return cell._getUpdateRequest();\n                });\n                responseRanges = _.map(cellsToUpdate, function (c) {\n                  return \"\".concat(_this3.a1SheetName, \"!\").concat(c.a1Address);\n                }); // if nothing is being updated the request returned is just `null`\n                // so we make sure at least 1 request is valid - otherwise google throws a 400\n\n                if (_.compact(requests).length) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error('At least one cell must have something to update');\n\n              case 4:\n                _context4.next = 6;\n                return this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function saveCells(_x4) {\n        return _saveCells.apply(this, arguments);\n      }\n\n      return saveCells;\n    }() // SAVING THIS FOR FUTURE USE\n    // puts the cells that need updating into batches\n    // async updateCellsByBatches() {\n    //   // saving this code, but it's problematic because each group must have the same update fields\n    //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n    //   const groupsToSave = [];\n    //   _.each(cellsByRow, (cells, rowIndex) => {\n    //     let cellGroup = [];\n    //     _.each(cells, (c) => {\n    //       if (!cellGroup.length) {\n    //         cellGroup.push(c);\n    //       } else if (\n    //         cellGroup[cellGroup.length - 1].columnIndex ===\n    //         c.columnIndex - 1\n    //       ) {\n    //         cellGroup.push(c);\n    //       } else {\n    //         groupsToSave.push(cellGroup);\n    //         cellGroup = [];\n    //       }\n    //     });\n    //     groupsToSave.push(cellGroup);\n    //   });\n    //   const requests = _.map(groupsToSave, (cellGroup) => ({\n    //     updateCells: {\n    //       rows: [\n    //         {\n    //           values: _.map(cellGroup, (cell) => ({\n    //             ...cell._draftData.value && {\n    //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n    //             },\n    //             ...cell._draftData.note !== undefined && {\n    //               note: cell._draftData.note ,\n    //             },\n    //             ...cell._draftData.userEnteredFormat && {\n    //               userEnteredValue: cell._draftData.userEnteredFormat,\n    //             },\n    //           })),\n    //         },\n    //       ],\n    //       fields: 'userEnteredValue,note,userEnteredFormat',\n    //       start: {\n    //         sheetId: this.sheetId,\n    //         rowIndex: cellGroup[0].rowIndex,\n    //         columnIndex: cellGroup[0].columnIndex,\n    //       },\n    //     },\n    //   }));\n    //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n    //     let a1Range = cellGroup[0].a1Address;\n    //     if (cellGroup.length > 1)\n    //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n    //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n    //   });\n    // }\n    // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"loadHeaderRow\",\n    value: function () {\n      var _loadHeaderRow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var rows;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getCellsInRange(\"A1:\".concat(this.lastColumnLetter, \"1\"));\n\n              case 2:\n                rows = _context5.sent;\n\n                if (rows) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n\n              case 5:\n                this.headerValues = _.map(rows[0], function (header) {\n                  return header.trim();\n                });\n\n                if (_.compact(this.headerValues).length) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n\n              case 8:\n                checkForDuplicateHeaders(this.headerValues);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function loadHeaderRow() {\n        return _loadHeaderRow.apply(this, arguments);\n      }\n\n      return loadHeaderRow;\n    }()\n  }, {\n    key: \"setHeaderRow\",\n    value: function () {\n      var _setHeaderRow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(headerValues) {\n        var trimmedHeaderValues, response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (headerValues) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 2:\n                if (!(headerValues.length > this.columnCount)) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Sheet is not large enough to fit \".concat(headerValues.length, \" columns. Resize the sheet first.\"));\n\n              case 4:\n                trimmedHeaderValues = _.map(headerValues, function (h) {\n                  return h.trim();\n                });\n                checkForDuplicateHeaders(trimmedHeaderValues);\n\n                if (_.compact(trimmedHeaderValues).length) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error('All your header cells are blank -');\n\n              case 8:\n                _context6.next = 10;\n                return this._spreadsheet.axios.request({\n                  method: 'put',\n                  url: \"/values/\".concat(this.encodedA1SheetName, \"!1:1\"),\n                  params: {\n                    valueInputOption: 'USER_ENTERED',\n                    // other option is RAW\n                    includeValuesInResponse: true\n                  },\n                  data: {\n                    range: \"\".concat(this.a1SheetName, \"!1:1\"),\n                    majorDimension: 'ROWS',\n                    values: [[].concat(_toConsumableArray(trimmedHeaderValues), _toConsumableArray(_.times(this.columnCount - trimmedHeaderValues.length, function () {\n                      return '';\n                    })))]\n                  }\n                });\n\n              case 10:\n                response = _context6.sent;\n                this.headerValues = response.data.updatedData.values[0];\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setHeaderRow(_x5) {\n        return _setHeaderRow.apply(this, arguments);\n      }\n\n      return setHeaderRow;\n    }()\n  }, {\n    key: \"addRows\",\n    value: function () {\n      var _addRows = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(rows) {\n        var _this4 = this;\n\n        var options,\n            rowsAsArrays,\n            response,\n            updatedRange,\n            rowNumber,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n\n                if (!this.title.includes(':')) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n\n              case 3:\n                if (_.isArray(rows)) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw new Error('You must pass in an array of row values to append');\n\n              case 5:\n                if (this.headerValues) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                _context7.next = 8;\n                return this.loadHeaderRow();\n\n              case 8:\n                // convert each row into an array of cell values rather than the key/value object\n                rowsAsArrays = [];\n\n                _.each(rows, function (row) {\n                  var rowAsArray;\n\n                  if (_.isArray(row)) {\n                    rowAsArray = row;\n                  } else if (_.isObject(row)) {\n                    rowAsArray = [];\n\n                    for (var i = 0; i < _this4.headerValues.length; i++) {\n                      var propName = _this4.headerValues[i];\n                      rowAsArray[i] = row[propName];\n                    }\n                  } else {\n                    throw new Error('Each row must be an object or an array');\n                  }\n\n                  rowsAsArrays.push(rowAsArray);\n                });\n\n                _context7.next = 12;\n                return this._spreadsheet.axios.request({\n                  method: 'post',\n                  url: \"/values/\".concat(this.encodedA1SheetName, \"!A1:append\"),\n                  params: {\n                    valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n                    insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n                    includeValuesInResponse: true\n                  },\n                  data: {\n                    values: rowsAsArrays\n                  }\n                });\n\n              case 12:\n                response = _context7.sent;\n                // extract the new row number from the A1-notation data range in the response\n                // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n                updatedRange = response.data.updates.updatedRange;\n                rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n                rowNumber = parseInt(rowNumber); // if new rows were added, we need update sheet.rowRount\n\n                if (options.insert) {\n                  this._rawProperties.gridProperties.rowCount += rows.length;\n                } else if (rowNumber + rows.length > this.rowCount) {\n                  // have to subtract 1 since one row was inserted at rowNumber\n                  this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n                }\n\n                return _context7.abrupt(\"return\", _.map(response.data.updates.updatedData.values, function (rowValues) {\n                  var row = new GoogleSpreadsheetRow(_this4, rowNumber++, rowValues);\n                  return row;\n                }));\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function addRows(_x6) {\n        return _addRows.apply(this, arguments);\n      }\n\n      return addRows;\n    }()\n  }, {\n    key: \"addRow\",\n    value: function () {\n      var _addRow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(rowValues, options) {\n        var rows;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.addRows([rowValues], options);\n\n              case 2:\n                rows = _context8.sent;\n                return _context8.abrupt(\"return\", rows[0]);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function addRow(_x7, _x8) {\n        return _addRow.apply(this, arguments);\n      }\n\n      return addRow;\n    }()\n  }, {\n    key: \"getRows\",\n    value: function () {\n      var _getRows = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var options,\n            firstRow,\n            lastRow,\n            lastColumn,\n            rawRows,\n            rows,\n            rowNum,\n            i,\n            _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n                // https://developers.google.com/sheets/api/guides/migration\n                // v4 API does not have equivalents for the row-order query parameters provided\n                // Reverse-order is trivial; simply process the returned values array in reverse order.\n                // Order by column is not supported for reads, but it is possible to sort the data then read\n                // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n                // However, you can retrieve the relevant data and sort through it as needed in your application\n                // options\n                // - offset\n                // - limit\n                options.offset = options.offset || 0;\n                options.limit = options.limit || this.rowCount - 1;\n\n                if (this.headerValues) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                _context9.next = 6;\n                return this.loadHeaderRow();\n\n              case 6:\n                firstRow = 2 + options.offset; // skip first row AND not zero indexed\n\n                lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n\n                lastColumn = columnToLetter(this.headerValues.length);\n                _context9.next = 11;\n                return this.getCellsInRange(\"A\".concat(firstRow, \":\").concat(lastColumn).concat(lastRow));\n\n              case 11:\n                rawRows = _context9.sent;\n\n                if (rawRows) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", []);\n\n              case 14:\n                rows = [];\n                rowNum = firstRow;\n\n                for (i = 0; i < rawRows.length; i++) {\n                  rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n                }\n\n                return _context9.abrupt(\"return\", rows);\n\n              case 18:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getRows() {\n        return _getRows.apply(this, arguments);\n      }\n\n      return getRows;\n    }() // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"updateProperties\",\n    value: function () {\n      var _updateProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(properties) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this._makeSingleUpdateRequest('updateSheetProperties', {\n                  properties: _objectSpread({\n                    sheetId: this.sheetId\n                  }, properties),\n                  fields: getFieldMask(properties)\n                }));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function updateProperties(_x9) {\n        return _updateProperties.apply(this, arguments);\n      }\n\n      return updateProperties;\n    }()\n  }, {\n    key: \"updateGridProperties\",\n    value: function () {\n      var _updateGridProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(gridProperties) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.updateProperties({\n                  gridProperties: gridProperties\n                }));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function updateGridProperties(_x10) {\n        return _updateGridProperties.apply(this, arguments);\n      }\n\n      return updateGridProperties;\n    }() // just a shortcut because resize makes more sense to change rowCount / columnCount\n\n  }, {\n    key: \"resize\",\n    value: function () {\n      var _resize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(gridProperties) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.updateGridProperties(gridProperties));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function resize(_x11) {\n        return _resize.apply(this, arguments);\n      }\n\n      return resize;\n    }()\n  }, {\n    key: \"updateDimensionProperties\",\n    value: function () {\n      var _updateDimensionProperties = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(columnsOrRows, properties, bounds) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this._makeSingleUpdateRequest('updateDimensionProperties', {\n                  range: _objectSpread({\n                    sheetId: this.sheetId,\n                    dimension: columnsOrRows\n                  }, bounds && {\n                    startIndex: bounds.startIndex,\n                    endIndex: bounds.endIndex\n                  }),\n                  properties: properties,\n                  fields: getFieldMask(properties)\n                }));\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function updateDimensionProperties(_x12, _x13, _x14) {\n        return _updateDimensionProperties.apply(this, arguments);\n      }\n\n      return updateDimensionProperties;\n    }() // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n    // this uses the \"values\" getter and does not give all the info about the cell contents\n    // it is used internally when loading header cells\n\n  }, {\n    key: \"getCellsInRange\",\n    value: function () {\n      var _getCellsInRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(a1Range, options) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this._spreadsheet.axios.get(\"/values/\".concat(this.encodedA1SheetName, \"!\").concat(a1Range), {\n                  params: options\n                });\n\n              case 2:\n                response = _context14.sent;\n                return _context14.abrupt(\"return\", response.data.values);\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getCellsInRange(_x15, _x16) {\n        return _getCellsInRange.apply(this, arguments);\n      }\n\n      return getCellsInRange;\n    }()\n  }, {\n    key: \"updateNamedRange\",\n    value: function () {\n      var _updateNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n\n      function updateNamedRange() {\n        return _updateNamedRange.apply(this, arguments);\n      }\n\n      return updateNamedRange;\n    }()\n  }, {\n    key: \"addNamedRange\",\n    value: function () {\n      var _addNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      }));\n\n      function addNamedRange() {\n        return _addNamedRange.apply(this, arguments);\n      }\n\n      return addNamedRange;\n    }()\n  }, {\n    key: \"deleteNamedRange\",\n    value: function () {\n      var _deleteNamedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      function deleteNamedRange() {\n        return _deleteNamedRange.apply(this, arguments);\n      }\n\n      return deleteNamedRange;\n    }()\n  }, {\n    key: \"repeatCell\",\n    value: function () {\n      var _repeatCell = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      function repeatCell() {\n        return _repeatCell.apply(this, arguments);\n      }\n\n      return repeatCell;\n    }()\n  }, {\n    key: \"autoFill\",\n    value: function () {\n      var _autoFill = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function autoFill() {\n        return _autoFill.apply(this, arguments);\n      }\n\n      return autoFill;\n    }()\n  }, {\n    key: \"cutPaste\",\n    value: function () {\n      var _cutPaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      function cutPaste() {\n        return _cutPaste.apply(this, arguments);\n      }\n\n      return cutPaste;\n    }()\n  }, {\n    key: \"copyPaste\",\n    value: function () {\n      var _copyPaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21);\n      }));\n\n      function copyPaste() {\n        return _copyPaste.apply(this, arguments);\n      }\n\n      return copyPaste;\n    }()\n  }, {\n    key: \"mergeCells\",\n    value: function () {\n      var _mergeCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(range) {\n        var mergeType,\n            _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                mergeType = _args22.length > 1 && _args22[1] !== undefined ? _args22[1] : 'MERGE_ALL';\n\n                if (!(range.sheetId && range.sheetId !== this.sheetId)) {\n                  _context22.next = 3;\n                  break;\n                }\n\n                throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n\n              case 3:\n                _context22.next = 5;\n                return this._makeSingleUpdateRequest('mergeCells', {\n                  mergeType: mergeType,\n                  range: _objectSpread(_objectSpread({}, range), {}, {\n                    sheetId: this.sheetId\n                  })\n                });\n\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function mergeCells(_x17) {\n        return _mergeCells.apply(this, arguments);\n      }\n\n      return mergeCells;\n    }()\n  }, {\n    key: \"unmergeCells\",\n    value: function () {\n      var _unmergeCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(range) {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(range.sheetId && range.sheetId !== this.sheetId)) {\n                  _context23.next = 2;\n                  break;\n                }\n\n                throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n\n              case 2:\n                _context23.next = 4;\n                return this._makeSingleUpdateRequest('unmergeCells', {\n                  range: _objectSpread(_objectSpread({}, range), {}, {\n                    sheetId: this.sheetId\n                  })\n                });\n\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function unmergeCells(_x18) {\n        return _unmergeCells.apply(this, arguments);\n      }\n\n      return unmergeCells;\n    }()\n  }, {\n    key: \"updateBorders\",\n    value: function () {\n      var _updateBorders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n\n      function updateBorders() {\n        return _updateBorders.apply(this, arguments);\n      }\n\n      return updateBorders;\n    }()\n  }, {\n    key: \"addFilterView\",\n    value: function () {\n      var _addFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25);\n      }));\n\n      function addFilterView() {\n        return _addFilterView.apply(this, arguments);\n      }\n\n      return addFilterView;\n    }()\n  }, {\n    key: \"appendCells\",\n    value: function () {\n      var _appendCells = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26);\n      }));\n\n      function appendCells() {\n        return _appendCells.apply(this, arguments);\n      }\n\n      return appendCells;\n    }()\n  }, {\n    key: \"clearBasicFilter\",\n    value: function () {\n      var _clearBasicFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27);\n      }));\n\n      function clearBasicFilter() {\n        return _clearBasicFilter.apply(this, arguments);\n      }\n\n      return clearBasicFilter;\n    }()\n  }, {\n    key: \"deleteDimension\",\n    value: function () {\n      var _deleteDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28);\n      }));\n\n      function deleteDimension() {\n        return _deleteDimension.apply(this, arguments);\n      }\n\n      return deleteDimension;\n    }()\n  }, {\n    key: \"deleteEmbeddedObject\",\n    value: function () {\n      var _deleteEmbeddedObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29);\n      }));\n\n      function deleteEmbeddedObject() {\n        return _deleteEmbeddedObject.apply(this, arguments);\n      }\n\n      return deleteEmbeddedObject;\n    }()\n  }, {\n    key: \"deleteFilterView\",\n    value: function () {\n      var _deleteFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30);\n      }));\n\n      function deleteFilterView() {\n        return _deleteFilterView.apply(this, arguments);\n      }\n\n      return deleteFilterView;\n    }()\n  }, {\n    key: \"duplicateFilterView\",\n    value: function () {\n      var _duplicateFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31);\n      }));\n\n      function duplicateFilterView() {\n        return _duplicateFilterView.apply(this, arguments);\n      }\n\n      return duplicateFilterView;\n    }()\n  }, {\n    key: \"duplicateSheet\",\n    value: function () {\n      var _duplicateSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32);\n      }));\n\n      function duplicateSheet() {\n        return _duplicateSheet.apply(this, arguments);\n      }\n\n      return duplicateSheet;\n    }()\n  }, {\n    key: \"findReplace\",\n    value: function () {\n      var _findReplace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33);\n      }));\n\n      function findReplace() {\n        return _findReplace.apply(this, arguments);\n      }\n\n      return findReplace;\n    }()\n  }, {\n    key: \"insertDimension\",\n    value: function () {\n      var _insertDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34);\n      }));\n\n      function insertDimension() {\n        return _insertDimension.apply(this, arguments);\n      }\n\n      return insertDimension;\n    }()\n  }, {\n    key: \"insertRange\",\n    value: function () {\n      var _insertRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35);\n      }));\n\n      function insertRange() {\n        return _insertRange.apply(this, arguments);\n      }\n\n      return insertRange;\n    }()\n  }, {\n    key: \"moveDimension\",\n    value: function () {\n      var _moveDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36() {\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36);\n      }));\n\n      function moveDimension() {\n        return _moveDimension.apply(this, arguments);\n      }\n\n      return moveDimension;\n    }()\n  }, {\n    key: \"updateEmbeddedObjectPosition\",\n    value: function () {\n      var _updateEmbeddedObjectPosition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37() {\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37);\n      }));\n\n      function updateEmbeddedObjectPosition() {\n        return _updateEmbeddedObjectPosition.apply(this, arguments);\n      }\n\n      return updateEmbeddedObjectPosition;\n    }()\n  }, {\n    key: \"pasteData\",\n    value: function () {\n      var _pasteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38() {\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38);\n      }));\n\n      function pasteData() {\n        return _pasteData.apply(this, arguments);\n      }\n\n      return pasteData;\n    }()\n  }, {\n    key: \"textToColumns\",\n    value: function () {\n      var _textToColumns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39() {\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39);\n      }));\n\n      function textToColumns() {\n        return _textToColumns.apply(this, arguments);\n      }\n\n      return textToColumns;\n    }()\n  }, {\n    key: \"updateFilterView\",\n    value: function () {\n      var _updateFilterView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40() {\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40);\n      }));\n\n      function updateFilterView() {\n        return _updateFilterView.apply(this, arguments);\n      }\n\n      return updateFilterView;\n    }()\n  }, {\n    key: \"deleteRange\",\n    value: function () {\n      var _deleteRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41() {\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41);\n      }));\n\n      function deleteRange() {\n        return _deleteRange.apply(this, arguments);\n      }\n\n      return deleteRange;\n    }()\n  }, {\n    key: \"appendDimension\",\n    value: function () {\n      var _appendDimension = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42() {\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42);\n      }));\n\n      function appendDimension() {\n        return _appendDimension.apply(this, arguments);\n      }\n\n      return appendDimension;\n    }()\n  }, {\n    key: \"addConditionalFormatRule\",\n    value: function () {\n      var _addConditionalFormatRule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43() {\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43);\n      }));\n\n      function addConditionalFormatRule() {\n        return _addConditionalFormatRule.apply(this, arguments);\n      }\n\n      return addConditionalFormatRule;\n    }()\n  }, {\n    key: \"updateConditionalFormatRule\",\n    value: function () {\n      var _updateConditionalFormatRule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44() {\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44);\n      }));\n\n      function updateConditionalFormatRule() {\n        return _updateConditionalFormatRule.apply(this, arguments);\n      }\n\n      return updateConditionalFormatRule;\n    }()\n  }, {\n    key: \"deleteConditionalFormatRule\",\n    value: function () {\n      var _deleteConditionalFormatRule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45() {\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45);\n      }));\n\n      function deleteConditionalFormatRule() {\n        return _deleteConditionalFormatRule.apply(this, arguments);\n      }\n\n      return deleteConditionalFormatRule;\n    }()\n  }, {\n    key: \"sortRange\",\n    value: function () {\n      var _sortRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46() {\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46);\n      }));\n\n      function sortRange() {\n        return _sortRange.apply(this, arguments);\n      }\n\n      return sortRange;\n    }()\n  }, {\n    key: \"setDataValidation\",\n    value: function () {\n      var _setDataValidation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47() {\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47);\n      }));\n\n      function setDataValidation() {\n        return _setDataValidation.apply(this, arguments);\n      }\n\n      return setDataValidation;\n    }()\n  }, {\n    key: \"setBasicFilter\",\n    value: function () {\n      var _setBasicFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48() {\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48);\n      }));\n\n      function setBasicFilter() {\n        return _setBasicFilter.apply(this, arguments);\n      }\n\n      return setBasicFilter;\n    }()\n  }, {\n    key: \"addProtectedRange\",\n    value: function () {\n      var _addProtectedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49() {\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49);\n      }));\n\n      function addProtectedRange() {\n        return _addProtectedRange.apply(this, arguments);\n      }\n\n      return addProtectedRange;\n    }()\n  }, {\n    key: \"updateProtectedRange\",\n    value: function () {\n      var _updateProtectedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50() {\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50);\n      }));\n\n      function updateProtectedRange() {\n        return _updateProtectedRange.apply(this, arguments);\n      }\n\n      return updateProtectedRange;\n    }()\n  }, {\n    key: \"deleteProtectedRange\",\n    value: function () {\n      var _deleteProtectedRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51() {\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51);\n      }));\n\n      function deleteProtectedRange() {\n        return _deleteProtectedRange.apply(this, arguments);\n      }\n\n      return deleteProtectedRange;\n    }()\n  }, {\n    key: \"autoResizeDimensions\",\n    value: function () {\n      var _autoResizeDimensions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52() {\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52);\n      }));\n\n      function autoResizeDimensions() {\n        return _autoResizeDimensions.apply(this, arguments);\n      }\n\n      return autoResizeDimensions;\n    }()\n  }, {\n    key: \"addChart\",\n    value: function () {\n      var _addChart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53() {\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53);\n      }));\n\n      function addChart() {\n        return _addChart.apply(this, arguments);\n      }\n\n      return addChart;\n    }()\n  }, {\n    key: \"updateChartSpec\",\n    value: function () {\n      var _updateChartSpec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54() {\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54);\n      }));\n\n      function updateChartSpec() {\n        return _updateChartSpec.apply(this, arguments);\n      }\n\n      return updateChartSpec;\n    }()\n  }, {\n    key: \"updateBanding\",\n    value: function () {\n      var _updateBanding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55() {\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55);\n      }));\n\n      function updateBanding() {\n        return _updateBanding.apply(this, arguments);\n      }\n\n      return updateBanding;\n    }()\n  }, {\n    key: \"addBanding\",\n    value: function () {\n      var _addBanding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56() {\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56);\n      }));\n\n      function addBanding() {\n        return _addBanding.apply(this, arguments);\n      }\n\n      return addBanding;\n    }()\n  }, {\n    key: \"deleteBanding\",\n    value: function () {\n      var _deleteBanding = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57() {\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57);\n      }));\n\n      function deleteBanding() {\n        return _deleteBanding.apply(this, arguments);\n      }\n\n      return deleteBanding;\n    }()\n  }, {\n    key: \"createDeveloperMetadata\",\n    value: function () {\n      var _createDeveloperMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58() {\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58);\n      }));\n\n      function createDeveloperMetadata() {\n        return _createDeveloperMetadata.apply(this, arguments);\n      }\n\n      return createDeveloperMetadata;\n    }()\n  }, {\n    key: \"updateDeveloperMetadata\",\n    value: function () {\n      var _updateDeveloperMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59() {\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59);\n      }));\n\n      function updateDeveloperMetadata() {\n        return _updateDeveloperMetadata.apply(this, arguments);\n      }\n\n      return updateDeveloperMetadata;\n    }()\n  }, {\n    key: \"deleteDeveloperMetadata\",\n    value: function () {\n      var _deleteDeveloperMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60() {\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60);\n      }));\n\n      function deleteDeveloperMetadata() {\n        return _deleteDeveloperMetadata.apply(this, arguments);\n      }\n\n      return deleteDeveloperMetadata;\n    }()\n  }, {\n    key: \"randomizeRange\",\n    value: function () {\n      var _randomizeRange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61() {\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61);\n      }));\n\n      function randomizeRange() {\n        return _randomizeRange.apply(this, arguments);\n      }\n\n      return randomizeRange;\n    }()\n  }, {\n    key: \"addDimensionGroup\",\n    value: function () {\n      var _addDimensionGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62() {\n        return _regeneratorRuntime.wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n        }, _callee62);\n      }));\n\n      function addDimensionGroup() {\n        return _addDimensionGroup.apply(this, arguments);\n      }\n\n      return addDimensionGroup;\n    }()\n  }, {\n    key: \"deleteDimensionGroup\",\n    value: function () {\n      var _deleteDimensionGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63() {\n        return _regeneratorRuntime.wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n        }, _callee63);\n      }));\n\n      function deleteDimensionGroup() {\n        return _deleteDimensionGroup.apply(this, arguments);\n      }\n\n      return deleteDimensionGroup;\n    }()\n  }, {\n    key: \"updateDimensionGroup\",\n    value: function () {\n      var _updateDimensionGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64() {\n        return _regeneratorRuntime.wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n        }, _callee64);\n      }));\n\n      function updateDimensionGroup() {\n        return _updateDimensionGroup.apply(this, arguments);\n      }\n\n      return updateDimensionGroup;\n    }()\n  }, {\n    key: \"trimWhitespace\",\n    value: function () {\n      var _trimWhitespace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65() {\n        return _regeneratorRuntime.wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n        }, _callee65);\n      }));\n\n      function trimWhitespace() {\n        return _trimWhitespace.apply(this, arguments);\n      }\n\n      return trimWhitespace;\n    }()\n  }, {\n    key: \"deleteDuplicates\",\n    value: function () {\n      var _deleteDuplicates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66() {\n        return _regeneratorRuntime.wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n        }, _callee66);\n      }));\n\n      function deleteDuplicates() {\n        return _deleteDuplicates.apply(this, arguments);\n      }\n\n      return deleteDuplicates;\n    }()\n  }, {\n    key: \"addSlicer\",\n    value: function () {\n      var _addSlicer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67() {\n        return _regeneratorRuntime.wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n        }, _callee67);\n      }));\n\n      function addSlicer() {\n        return _addSlicer.apply(this, arguments);\n      }\n\n      return addSlicer;\n    }()\n  }, {\n    key: \"updateSlicerSpec\",\n    value: function () {\n      var _updateSlicerSpec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee68() {\n        return _regeneratorRuntime.wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n        }, _callee68);\n      }));\n\n      function updateSlicerSpec() {\n        return _updateSlicerSpec.apply(this, arguments);\n      }\n\n      return updateSlicerSpec;\n    }() // delete this worksheet\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee69() {\n        return _regeneratorRuntime.wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                return _context69.abrupt(\"return\", this._spreadsheet.deleteSheet(this.sheetId));\n\n              case 1:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, this);\n      }));\n\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"del\",\n    value: function () {\n      var _del = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee70() {\n        return _regeneratorRuntime.wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                return _context70.abrupt(\"return\", this.delete());\n\n              case 1:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, this);\n      }));\n\n      function del() {\n        return _del.apply(this, arguments);\n      }\n\n      return del;\n    }() // alias to mimic old interface\n    // copies this worksheet into another document/spreadsheet\n\n  }, {\n    key: \"copyToSpreadsheet\",\n    value: function () {\n      var _copyToSpreadsheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee71(destinationSpreadsheetId) {\n        return _regeneratorRuntime.wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                return _context71.abrupt(\"return\", this._spreadsheet.axios.post(\"/sheets/\".concat(this.sheetId, \":copyTo\"), {\n                  destinationSpreadsheetId: destinationSpreadsheetId\n                }));\n\n              case 1:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n        }, _callee71, this);\n      }));\n\n      function copyToSpreadsheet(_x19) {\n        return _copyToSpreadsheet.apply(this, arguments);\n      }\n\n      return copyToSpreadsheet;\n    }()\n  }, {\n    key: \"clear\",\n    value: function () {\n      var _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee72() {\n        return _regeneratorRuntime.wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                _context72.next = 2;\n                return this._spreadsheet.axios.post(\"/values/\".concat(this.encodedA1SheetName, \":clear\"));\n\n              case 2:\n                this.resetLocalCache(true);\n\n              case 3:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n        }, _callee72, this);\n      }));\n\n      function clear() {\n        return _clear.apply(this, arguments);\n      }\n\n      return clear;\n    }()\n  }]);\n\n  return GoogleSpreadsheetWorksheet;\n}();\n\nmodule.exports = GoogleSpreadsheetWorksheet;","map":{"version":3,"sources":["C:/Users/91808/Music/onlineitsoftwaresolutions/node_modules/google-spreadsheet/lib/GoogleSpreadsheetWorksheet.js"],"names":["_","require","GoogleSpreadsheetRow","GoogleSpreadsheetCell","getFieldMask","columnToLetter","letterToColumn","checkForDuplicateHeaders","headers","checkForDupes","groupBy","each","grouped","header","length","Error","GoogleSpreadsheetWorksheet","parentSpreadsheet","properties","data","_spreadsheet","_rawProperties","_cells","_rowMetadata","_columnMetadata","_fillCellData","requestType","requestParams","_makeSingleUpdateRequest","dataOnly","headerValues","dataRanges","range","startRow","startColumn","numRows","rowMetadata","numColumns","columnMetadata","i","actualRow","j","actualColumn","cellData","get","_updateRawData","param","_ensureInfoLoaded","newVal","_getProp","_setProp","gridProperties","rowCount","columnCount","title","replace","encodeURIComponent","a1SheetName","allCells","flatten","compact","nonEmpty","filter","c","value","loaded","total","a1Address","split","match","columnIndex","rowIndex","parseInt","getCell","sheetFilters","loadCells","filtersArray","isArray","map","isString","startsWith","isObject","sheetId","cellsToSave","_isDirty","saveCells","cellsToUpdate","requests","cell","_getUpdateRequest","responseRanges","_makeBatchUpdateRequest","getCellsInRange","lastColumnLetter","rows","trim","trimmedHeaderValues","h","axios","request","method","url","encodedA1SheetName","params","valueInputOption","includeValuesInResponse","majorDimension","values","times","response","updatedData","options","includes","loadHeaderRow","rowsAsArrays","row","rowAsArray","propName","push","raw","insertDataOption","insert","updatedRange","updates","rowNumber","rowValues","addRows","offset","limit","firstRow","lastRow","lastColumn","rawRows","rowNum","fields","updateProperties","updateGridProperties","columnsOrRows","bounds","dimension","startIndex","endIndex","a1Range","mergeType","deleteSheet","delete","destinationSpreadsheetId","post","resetLocalCache","module","exports"],"mappings":"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","sourcesContent":["const _ = require('lodash');\n\nconst GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\nconst GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\n\nconst { getFieldMask, columnToLetter, letterToColumn } = require('./utils');\n\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  const checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n  _.each(checkForDupes, (grouped, header) => {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n    if (grouped.length > 1) {\n      throw new Error(`Duplicate header detected: \"${header}\". Please make sure all non-empty headers are unique`);\n    }\n  });\n}\n\nclass GoogleSpreadsheetWorksheet {\n  constructor(parentSpreadsheet, { properties, data }) {\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n\n    // basic properties\n    this._rawProperties = properties;\n\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n    this._columnMetadata = [];\n\n    if (data) this._fillCellData(data);\n\n    return this;\n  }\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    // pass the call up to the parent\n    return this._spreadsheet._makeSingleUpdateRequest(requestType, {\n      // sheetId: this.sheetId,\n      ...requestParams,\n    });\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) {\n      throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n    }\n  }\n\n  resetLocalCache(dataOnly) {\n    if (!dataOnly) this._rawProperties = null;\n    this.headerValues = null;\n    this._cells = [];\n  }\n\n  _fillCellData(dataRanges) {\n    _.each(dataRanges, (range) => {\n      const startRow = range.startRow || 0;\n      const startColumn = range.startColumn || 0;\n      const numRows = range.rowMetadata.length;\n      const numColumns = range.columnMetadata.length;\n\n      // update cell data for entire range\n      for (let i = 0; i < numRows; i++) {\n        const actualRow = startRow + i;\n        for (let j = 0; j < numColumns; j++) {\n          const actualColumn = startColumn + j;\n\n          // if the row has not been initialized yet, do it\n          if (!this._cells[actualRow]) this._cells[actualRow] = [];\n\n          // see if the response includes some info for the cell\n          const cellData = _.get(range, `rowData[${i}].values[${j}]`);\n\n          // update the cell object or create it\n          if (this._cells[actualRow][actualColumn]) {\n            this._cells[actualRow][actualColumn]._updateRawData(cellData);\n          } else {\n            this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(\n              this,\n              actualRow,\n              actualColumn,\n              cellData\n            );\n          }\n        }\n      }\n\n      // update row metadata\n      for (let i = 0; i < range.rowMetadata.length; i++) {\n        this._rowMetadata[startRow + i] = range.rowMetadata[i];\n      }\n      // update column metadata\n      for (let i = 0; i < range.columnMetadata.length; i++) {\n        this._columnMetadata[startColumn + i] = range.columnMetadata[i];\n      }\n    });\n  }\n\n\n  // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get sheetId() { return this._getProp('sheetId'); }\n  get title() { return this._getProp('title'); }\n  get index() { return this._getProp('index'); }\n  get sheetType() { return this._getProp('sheetType'); }\n  get gridProperties() { return this._getProp('gridProperties'); }\n  get hidden() { return this._getProp('hidden'); }\n  get tabColor() { return this._getProp('tabColor'); }\n  get rightToLeft() { return this._getProp('rightToLeft'); }\n\n  set sheetId(newVal) { return this._setProp('sheetId', newVal); }\n  set title(newVal) { return this._setProp('title', newVal); }\n  set index(newVal) { return this._setProp('index', newVal); }\n  set sheetType(newVal) { return this._setProp('sheetType', newVal); }\n  set gridProperties(newVal) { return this._setProp('gridProperties', newVal); }\n  set hidden(newVal) { return this._setProp('hidden', newVal); }\n  set tabColor(newVal) { return this._setProp('tabColor', newVal); }\n  set rightToLeft(newVal) { return this._setProp('rightToLeft', newVal); }\n\n  get rowCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.rowCount;\n  }\n  get columnCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.columnCount;\n  }\n  get colCount() { throw new Error('`colCount` is deprecated - please use `columnCount` instead.'); }\n  set rowCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n  set columnCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n\n  get a1SheetName() { return `'${this.title.replace(/'/g, \"''\")}'`; }\n  get encodedA1SheetName() { return encodeURIComponent(this.a1SheetName); }\n  get lastColumnLetter() { return columnToLetter(this.columnCount); }\n\n\n  // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n  get cellStats() {\n    let allCells = _.flatten(this._cells);\n    allCells = _.compact(allCells);\n    return {\n      nonEmpty: _.filter(allCells, (c) => c.value).length,\n      loaded: allCells.length,\n      total: this.rowCount * this.columnCount,\n    };\n  }\n\n  getCellByA1(a1Address) {\n    const split = a1Address.match(/([A-Z]+)([0-9]+)/);\n    const columnIndex = letterToColumn(split[1]);\n    const rowIndex = parseInt(split[2]);\n    return this.getCell(rowIndex - 1, columnIndex - 1);\n  }\n\n  getCell(rowIndex, columnIndex) {\n    if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n    if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n      throw new Error(`Out of bounds, sheet is ${this.rowCount} by ${this.columnCount}`);\n    }\n\n    if (!_.get(this._cells, `[${rowIndex}][${columnIndex}]`)) {\n      throw new Error('This cell has not been loaded yet');\n    }\n    return this._cells[rowIndex][columnIndex];\n  }\n\n\n  async loadCells(sheetFilters) {\n    // load the whole sheet\n    if (!sheetFilters) return this._spreadsheet.loadCells(this.a1SheetName);\n\n    let filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n    filtersArray = _.map(filtersArray, (filter) => {\n      // add sheet name to A1 ranges\n      if (_.isString(filter)) {\n        if (filter.startsWith(this.a1SheetName)) return filter;\n        return `${this.a1SheetName}!${filter}`;\n      }\n      if (_.isObject(filter)) {\n        // TODO: detect and support DeveloperMetadata filters\n        if (!filter.sheetId) {\n          return { sheetId: this.sheetId, ...filter };\n        }\n        if (filter.sheetId !== this.sheetId) {\n          throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n        } else {\n          return filter;\n        }\n      } else {\n        throw new Error('Each filter must be a A1 range string or gridrange object');\n      }\n    });\n    return this._spreadsheet.loadCells(filtersArray);\n  }\n\n  async saveUpdatedCells() {\n    const cellsToSave = _.filter(_.flatten(this._cells), { _isDirty: true });\n    if (cellsToSave.length) {\n      await this.saveCells(cellsToSave);\n    }\n    // TODO: do we want to return stats? or the cells that got updated?\n  }\n\n  async saveCells(cellsToUpdate) {\n    // we send an individual \"updateCells\" request for each cell\n    // because the fields that are udpated for each group are the same\n    // and we dont want to accidentally overwrite something\n    const requests = _.map(cellsToUpdate, (cell) => cell._getUpdateRequest());\n    const responseRanges = _.map(cellsToUpdate, (c) => `${this.a1SheetName}!${c.a1Address}`);\n\n    // if nothing is being updated the request returned is just `null`\n    // so we make sure at least 1 request is valid - otherwise google throws a 400\n    if (!_.compact(requests).length) {\n      throw new Error('At least one cell must have something to update');\n    }\n\n    await this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n  }\n\n  // SAVING THIS FOR FUTURE USE\n  // puts the cells that need updating into batches\n  // async updateCellsByBatches() {\n  //   // saving this code, but it's problematic because each group must have the same update fields\n  //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n  //   const groupsToSave = [];\n  //   _.each(cellsByRow, (cells, rowIndex) => {\n  //     let cellGroup = [];\n  //     _.each(cells, (c) => {\n  //       if (!cellGroup.length) {\n  //         cellGroup.push(c);\n  //       } else if (\n  //         cellGroup[cellGroup.length - 1].columnIndex ===\n  //         c.columnIndex - 1\n  //       ) {\n  //         cellGroup.push(c);\n  //       } else {\n  //         groupsToSave.push(cellGroup);\n  //         cellGroup = [];\n  //       }\n  //     });\n  //     groupsToSave.push(cellGroup);\n  //   });\n  //   const requests = _.map(groupsToSave, (cellGroup) => ({\n  //     updateCells: {\n  //       rows: [\n  //         {\n  //           values: _.map(cellGroup, (cell) => ({\n  //             ...cell._draftData.value && {\n  //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n  //             },\n  //             ...cell._draftData.note !== undefined && {\n  //               note: cell._draftData.note ,\n  //             },\n  //             ...cell._draftData.userEnteredFormat && {\n  //               userEnteredValue: cell._draftData.userEnteredFormat,\n  //             },\n  //           })),\n  //         },\n  //       ],\n  //       fields: 'userEnteredValue,note,userEnteredFormat',\n  //       start: {\n  //         sheetId: this.sheetId,\n  //         rowIndex: cellGroup[0].rowIndex,\n  //         columnIndex: cellGroup[0].columnIndex,\n  //       },\n  //     },\n  //   }));\n  //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n  //     let a1Range = cellGroup[0].a1Address;\n  //     if (cellGroup.length > 1)\n  //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n  //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n  //   });\n  // }\n\n\n  // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n  async loadHeaderRow() {\n    const rows = await this.getCellsInRange(`A1:${this.lastColumnLetter}1`);\n    if (!rows) {\n      throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n    }\n    this.headerValues = _.map(rows[0], (header) => header.trim());\n    if (!_.compact(this.headerValues).length) {\n      throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n    }\n    checkForDuplicateHeaders(this.headerValues);\n  }\n\n  async setHeaderRow(headerValues) {\n    if (!headerValues) return;\n    if (headerValues.length > this.columnCount) {\n      throw new Error(`Sheet is not large enough to fit ${headerValues.length} columns. Resize the sheet first.`);\n    }\n    const trimmedHeaderValues = _.map(headerValues, (h) => h.trim());\n    checkForDuplicateHeaders(trimmedHeaderValues);\n\n    if (!_.compact(trimmedHeaderValues).length) {\n      throw new Error('All your header cells are blank -');\n    }\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'put',\n      url: `/values/${this.encodedA1SheetName}!1:1`,\n      params: {\n        valueInputOption: 'USER_ENTERED', // other option is RAW\n        includeValuesInResponse: true,\n      },\n      data: {\n        range: `${this.a1SheetName}!1:1`,\n        majorDimension: 'ROWS',\n        values: [[\n          ...trimmedHeaderValues,\n          // pad the rest of the row with empty values to clear them all out\n          ..._.times(this.columnCount - trimmedHeaderValues.length, () => ''),\n        ]],\n      },\n    });\n    this.headerValues = response.data.updatedData.values[0];\n  }\n\n  async addRows(rows, options = {}) {\n    // adds multiple rows in one API interaction using the append endpoint\n\n    // each row can be an array or object\n    // an array is just cells\n    // ex: ['column 1', 'column 2', 'column 3']\n    // an object must use the header row values as keys\n    // ex: { col1: 'column 1', col2: 'column 2', col3: 'column 3' }\n\n    // google bug that does not handle colons in names\n    // see https://issuetracker.google.com/issues/150373119\n    if (this.title.includes(':')) {\n      throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n    }\n\n    if (!_.isArray(rows)) throw new Error('You must pass in an array of row values to append');\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    // convert each row into an array of cell values rather than the key/value object\n    const rowsAsArrays = [];\n    _.each(rows, (row) => {\n      let rowAsArray;\n      if (_.isArray(row)) {\n        rowAsArray = row;\n      } else if (_.isObject(row)) {\n        rowAsArray = [];\n        for (let i = 0; i < this.headerValues.length; i++) {\n          const propName = this.headerValues[i];\n          rowAsArray[i] = row[propName];\n        }\n      } else {\n        throw new Error('Each row must be an object or an array');\n      }\n      rowsAsArrays.push(rowAsArray);\n    });\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'post',\n      url: `/values/${this.encodedA1SheetName}!A1:append`,\n      params: {\n        valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n        insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n        includeValuesInResponse: true,\n      },\n      data: {\n        values: rowsAsArrays,\n      },\n    });\n\n    // extract the new row number from the A1-notation data range in the response\n    // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n    const { updatedRange } = response.data.updates;\n    let rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n    rowNumber = parseInt(rowNumber);\n\n    // if new rows were added, we need update sheet.rowRount\n    if (options.insert) {\n      this._rawProperties.gridProperties.rowCount += rows.length;\n    } else if (rowNumber + rows.length > this.rowCount) {\n      // have to subtract 1 since one row was inserted at rowNumber\n      this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n    }\n\n    return _.map(response.data.updates.updatedData.values, (rowValues) => {\n      const row = new GoogleSpreadsheetRow(this, rowNumber++, rowValues);\n      return row;\n    });\n  }\n\n  async addRow(rowValues, options) {\n    const rows = await this.addRows([rowValues], options);\n    return rows[0];\n  }\n\n  async getRows(options = {}) {\n    // https://developers.google.com/sheets/api/guides/migration\n    // v4 API does not have equivalents for the row-order query parameters provided\n    // Reverse-order is trivial; simply process the returned values array in reverse order.\n    // Order by column is not supported for reads, but it is possible to sort the data then read\n\n    // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n    // However, you can retrieve the relevant data and sort through it as needed in your application\n\n    // options\n    // - offset\n    // - limit\n\n    options.offset = options.offset || 0;\n    options.limit = options.limit || this.rowCount - 1;\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    const firstRow = 2 + options.offset; // skip first row AND not zero indexed\n    const lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n    const lastColumn = columnToLetter(this.headerValues.length);\n    const rawRows = await this.getCellsInRange(\n      `A${firstRow}:${lastColumn}${lastRow}`\n    );\n\n    if (!rawRows) return [];\n\n    const rows = [];\n    let rowNum = firstRow;\n    for (let i = 0; i < rawRows.length; i++) {\n      rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n    }\n    return rows;\n  }\n\n  // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n  async updateProperties(properties) {\n    // Request type = `updateSheetProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSheetPropertiesRequest\n\n    // properties\n    // - title (string)\n    // - index (number)\n    // - gridProperties ({ object (GridProperties) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#gridproperties\n    // - hidden (boolean)\n    // - tabColor ({ object (Color) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/other#Color\n    // - rightToLeft (boolean)\n\n    return this._makeSingleUpdateRequest('updateSheetProperties', {\n      properties: {\n        sheetId: this.sheetId,\n        ...properties,\n      },\n      fields: getFieldMask(properties),\n    });\n  }\n\n  async updateGridProperties(gridProperties) {\n    // just passes the call through to update gridProperties\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#GridProperties\n\n    // gridProperties\n    // - rowCount\n    // - columnCount\n    // - frozenRowCount\n    // - frozenColumnCount\n    // - hideGridLines\n    return this.updateProperties({ gridProperties });\n  }\n\n  // just a shortcut because resize makes more sense to change rowCount / columnCount\n  async resize(gridProperties) {\n    return this.updateGridProperties(gridProperties);\n  }\n\n  async updateDimensionProperties(columnsOrRows, properties, bounds) {\n    // Request type = `updateDimensionProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#updatedimensionpropertiesrequest\n\n    // columnsOrRows = COLUMNS|ROWS\n    // properties\n    // - pixelSize\n    // - hiddenByUser\n    // - developerMetadata\n    // bounds\n    // - startIndex\n    // - endIndex\n\n    return this._makeSingleUpdateRequest('updateDimensionProperties', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        ...bounds && {\n          startIndex: bounds.startIndex,\n          endIndex: bounds.endIndex,\n        },\n      },\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n\n  // this uses the \"values\" getter and does not give all the info about the cell contents\n  // it is used internally when loading header cells\n  async getCellsInRange(a1Range, options) {\n    const response = await this._spreadsheet.axios.get(`/values/${this.encodedA1SheetName}!${a1Range}`, {\n      params: options,\n    });\n    return response.data.values;\n  }\n\n  async updateNamedRange() {\n    // Request type = `updateNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateNamedRangeRequest\n  }\n\n  async addNamedRange() {\n    // Request type = `addNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddNamedRangeRequest\n  }\n\n  async deleteNamedRange() {\n    // Request type = `deleteNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteNamedRangeRequest\n  }\n\n  async repeatCell() {\n    // Request type = `repeatCell`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RepeatCellRequest\n  }\n\n  async autoFill() {\n    // Request type = `autoFill`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoFillRequest\n  }\n\n  async cutPaste() {\n    // Request type = `cutPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CutPasteRequest\n  }\n\n  async copyPaste() {\n    // Request type = `copyPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CopyPasteRequest\n  }\n\n  async mergeCells(range, mergeType = 'MERGE_ALL') {\n    // Request type = `mergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('mergeCells', {\n      mergeType,\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async unmergeCells(range) {\n    // Request type = `unmergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UnmergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('unmergeCells', {\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async updateBorders() {\n    // Request type = `updateBorders`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBordersRequest\n  }\n\n  async addFilterView() {\n    // Request type = `addFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddFilterViewRequest\n  }\n\n  async appendCells() {\n    // Request type = `appendCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendCellsRequest\n  }\n\n  async clearBasicFilter() {\n    // Request type = `clearBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#ClearBasicFilterRequest\n  }\n\n  async deleteDimension() {\n    // Request type = `deleteDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionRequest\n  }\n\n  async deleteEmbeddedObject() {\n    // Request type = `deleteEmbeddedObject`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteEmbeddedObjectRequest\n  }\n\n  async deleteFilterView() {\n    // Request type = `deleteFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteFilterViewRequest\n  }\n\n  async duplicateFilterView() {\n    // Request type = `duplicateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateFilterViewRequest\n  }\n\n  async duplicateSheet() {\n    // Request type = `duplicateSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateSheetRequest\n  }\n\n  async findReplace() {\n    // Request type = `findReplace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#FindReplaceRequest\n  }\n\n  async insertDimension() {\n    // Request type = `insertDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertDimensionRequest\n  }\n\n  async insertRange() {\n    // Request type = `insertRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertRangeRequest\n  }\n\n  async moveDimension() {\n    // Request type = `moveDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MoveDimensionRequest\n  }\n\n  async updateEmbeddedObjectPosition() {\n    // Request type = `updateEmbeddedObjectPosition`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateEmbeddedObjectPositionRequest\n  }\n\n  async pasteData() {\n    // Request type = `pasteData`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#PasteDataRequest\n  }\n\n  async textToColumns() {\n    // Request type = `textToColumns`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TextToColumnsRequest\n  }\n\n  async updateFilterView() {\n    // Request type = `updateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateFilterViewRequest\n  }\n\n  async deleteRange() {\n    // Request type = `deleteRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteRangeRequest\n  }\n\n  async appendDimension() {\n    // Request type = `appendDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendDimensionRequest\n  }\n\n  async addConditionalFormatRule() {\n    // Request type = `addConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddConditionalFormatRuleRequest\n  }\n\n  async updateConditionalFormatRule() {\n    // Request type = `updateConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateConditionalFormatRuleRequest\n  }\n\n  async deleteConditionalFormatRule() {\n    // Request type = `deleteConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteConditionalFormatRuleRequest\n  }\n\n  async sortRange() {\n    // Request type = `sortRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SortRangeRequest\n  }\n\n  async setDataValidation() {\n    // Request type = `setDataValidation`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetDataValidationRequest\n  }\n\n  async setBasicFilter() {\n    // Request type = `setBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetBasicFilterRequest\n  }\n\n  async addProtectedRange() {\n    // Request type = `addProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddProtectedRangeRequest\n  }\n\n  async updateProtectedRange() {\n    // Request type = `updateProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateProtectedRangeRequest\n  }\n\n  async deleteProtectedRange() {\n    // Request type = `deleteProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteProtectedRangeRequest\n  }\n\n  async autoResizeDimensions() {\n    // Request type = `autoResizeDimensions`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoResizeDimensionsRequest\n  }\n\n  async addChart() {\n    // Request type = `addChart`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddChartRequest\n  }\n\n  async updateChartSpec() {\n    // Request type = `updateChartSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateChartSpecRequest\n  }\n\n  async updateBanding() {\n    // Request type = `updateBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBandingRequest\n  }\n\n  async addBanding() {\n    // Request type = `addBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddBandingRequest\n  }\n\n  async deleteBanding() {\n    // Request type = `deleteBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteBandingRequest\n  }\n\n  async createDeveloperMetadata() {\n    // Request type = `createDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CreateDeveloperMetadataRequest\n  }\n\n  async updateDeveloperMetadata() {\n    // Request type = `updateDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDeveloperMetadataRequest\n  }\n\n  async deleteDeveloperMetadata() {\n    // Request type = `deleteDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDeveloperMetadataRequest\n  }\n\n  async randomizeRange() {\n    // Request type = `randomizeRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RandomizeRangeRequest\n  }\n\n  async addDimensionGroup() {\n    // Request type = `addDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddDimensionGroupRequest\n  }\n\n  async deleteDimensionGroup() {\n    // Request type = `deleteDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionGroupRequest\n  }\n\n  async updateDimensionGroup() {\n    // Request type = `updateDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDimensionGroupRequest\n  }\n\n  async trimWhitespace() {\n    // Request type = `trimWhitespace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TrimWhitespaceRequest\n  }\n\n  async deleteDuplicates() {\n    // Request type = `deleteDuplicates`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDuplicatesRequest\n  }\n\n  async addSlicer() {\n    // Request type = `addSlicer`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSlicerRequest\n  }\n\n  async updateSlicerSpec() {\n    // Request type = `updateSlicerSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSlicerSpecRequest\n  }\n\n  // delete this worksheet\n  async delete() {\n    return this._spreadsheet.deleteSheet(this.sheetId);\n  }\n  async del() { return this.delete(); } // alias to mimic old interface\n\n  // copies this worksheet into another document/spreadsheet\n  async copyToSpreadsheet(destinationSpreadsheetId) {\n    return this._spreadsheet.axios.post(`/sheets/${this.sheetId}:copyTo`, {\n      destinationSpreadsheetId,\n    });\n  }\n\n  async clear() {\n    // clears all the data in the sheet\n    // sheet name without ie 'sheet1' rather than 'sheet1'!A1:B5 is all cells\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}:clear`);\n    this.resetLocalCache(true);\n  }\n}\n\nmodule.exports = GoogleSpreadsheetWorksheet;\n"]},"metadata":{},"sourceType":"script"}